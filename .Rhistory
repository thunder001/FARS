getwd()
getwd()
document()
document()
library(devtools)
document()
document()
document()
library(FARS)
getwd()
document()
fars_map_state(17, 2015)
?fars_map_state
?fars_summarize_years
document()
library(FARS)
?fars_map_state
?fars_read
?fars_read_years
?fars_summarize_years
?fars_read
?fars_read_years
use_vignette("tutorial")
use_data()
fname <- system.file("extdata","accident_2013.csv.bz2", package="FARS")
fname
use_data_raw()
fname <- system.file("extdata","accident_2013.csv.bz2", package="FARS")
fname
dat <- fars_read(fname)
library(FARS)
fname <- system.file("extdata","accident_2013.csv.bz2", package="FARS")
fname
dat <- fars_read(fname)
head()
head(dat)
system.file("extdata", package="FARS")
dname <- system.file("extdata", package=FARS)
dname <- system.file("extdata", package="FARS")
dat <- fars_read_years(c(2013, 2014, 2015))
dname
setwd(dname)
dat <- fars_read_years(c(2013, 2014, 2015))
getwd(fname <- system.file("extdata","accident_2013.csv.bz2", package="FARS"))
getwd()
use_data()
dat <- fars_read_years(c("2013", "2014", "2015"))
dat <- fars_read_years(2013)
setwd(dname)
dat <- fars_read_years(c(2013, 2014, 2015))
getwd()
fname <- system.file("extdata","accident_2013.csv.bz2", package="FARS")
dat <- fars_read(fname)
fars_2013 <- fars_read(fname)
use_data("fars_2013")
use_data(fars_2013)
?fars_2013
library(FARS)
?fars_2013
head(fars_2013)
library(FARS)
?fars_2013
data(fars_2013)
head(fars_2013)
getwd9
getwd()
dname
setwd(dname)
getwd()
getwd()
dat <- fars_read_years(c(2013, 2014, 2015))
fars_read_years(c(2013, 2014, 2015))
fars_read_years(c(2013, 2014, 2015))
setwd(""/Library/Frameworks/R.framework/Versions/3.3/Resources/library/FARS/extdata"")
setwd("/Library/Frameworks/R.framework/Versions/3.3/Resources/library/FARS/extdata")
fars_read_years(c(2013, 2014, 2015))
make_filename(2013)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(2013)
fars_summarize_years(c(2013, 2014,2015))
library(FARS)
fars_2013
fname <- system.file("extdata","accident_2013.csv.bz2", package="FARS")
dat <- fars_read(fname)
head(dat)
dname <- system.file("extdata", package="FARS")
setwd(dname)
dat <- fars_read_years(c(2013, 2014, 2015))
#' Read a file
#'
#' This is a simple function that reads a file from a path. If the file doesn't exist,
#' then print a error information. Otherwise, read this file into a dataframe.
#'
#' @param filename character string giving a pathname of a file
#' @importFrom dplyr tbl_df
#' @return This function returns a dataframe to store data in the file
#'
#' @examples
#' /dontrun{
#' fars_read("filename.csv.bz2")
#' }
#'
#' @export
#'
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' Create a filename
#'
#' This function create a corresponding filename according to input year.
#'
#' @param year character string indicating year
#' @return This function returns a comparessed .csv file
#'
#' @examples
#' make_filename(2016)
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#' Read files with specific years
#'
#' This function read csv file with specific years into a list of dataframe.
#' If the input year doesn't exist, then a warning information "invalid year" will be printed
#' and return NULL
#'
#' @param years A vector containing multiple character strings
#' @importFrom dplyr mutate select
#'
#' @return This function returns a list of dataframes with specific years.
#'
#' @examples
#' /dontrun{
#' fars_read_years(c(2013, 2014, 2015))
#' }
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#' Summarize statistical results of FARS
#'
#' This function gives a summary of fata injuries given years
#'
#' @importFrom dplyr group_by summarize
#' @importFrom tidyr spread
#' @inheritParams fars_read_years
#' @return A dataframe of fatal injuries in given years
#' @examples
#' fars_summarize_years(c(2013, 2014, 2015))
#' @export
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' Map state-wide injuries in given year
#'
#' This function shows a map that indicates injuries distribution in a state of given year.
#' If misinput the state number, error message will be printed.
#' If no accidents is reported in this state of given yerar, "no accidents to plot" will be
#' printed.
#'
#' @param state.num An integer number representing a state
#' @param year An integer number for a given year
#' @importFrom maps map
#' @importFrom graphics points
#' @examples
#' fars_map_state(17, 2015)
#' @export
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
dat <- fars_read_years(c(2013, 2014, 2015))
fars_read_years(c(2013, 2014, 2015))
setwd("/Users/zhengc/Learning/R-software-development/week2/data")
fars_read_years(c(2013, 2014, 2015))
fars_read("filename.csv.bz2")
fars_summarize_years(c(2013, 2014, 2015))
fars_read("accident_2013.csv.bz2"
fars_read("accident_2013.csv.bz2")
getwd()
fars_read_years(c(2013, 2014, 2015))
file <- make_filename(2013)
file
dat <- fars_read(file)
head(dat)
dplyr::mutate(dat, year = 2013)
dplyr::select(dat, MONTH, year)
dplyr::select(dat, MONTH, 2013)
library(dplyr)
fars_read_years(c(2013, 2014, 2015))
dname <- system.file("extdata", package="FARS")
setwd(dname)
dat <- fars_read_years(c(2013, 2014, 2015))
head(dat)
dat <- fars_summarize_years(c(2013, 2014,2015))
fars_map_state(17, 2015)
library(maps
library(maps)
fars_map_state(17, 2015)
library(FARS)
dat <- fars_read(fname)
getwd()
setwd("/Users/zhengc/Learning/R-software-development/FARS")
library(FARS)
fname <- system.file("extdata","accident_2013.csv.bz2", package="FARS")
fname
dat <- fars_read(fname)
head(dat)
library(FARS)
document()
library(FARS)
use_vignette("Tutorial")
library(FARS)
library(FARS)
library(FARS)
build_vignettes("tutorial")
build_vignettes()
library(FARS)
head(dat)
dat <- fars_read(fname)
head(dat)
library(FARS)
build_vignettes()
build_vignettes()
use_data()
fname <- system.file("extdata","accident_2013.csv.bz2", package="FARS")
dat <- fars_read(fname)
fars_2013 <- fars_read(fname)
save(fars_2013, file="data/fars_2013.Rdata")
use_data(fars_2013)
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
library(FARS)
library(FARS)
?fars_2013
??fars_2013
fars_2013
data("fars_2013")
data(fars_2013)
library(FARS)
library(FARS)
?fars_2013
library(FARS)
?fars_2013
library(FARS)
?fars_2013
build_vignettes()
library(FARS)
expect_that(make_filename(2013), equals("accident_2013.csv.bz2"))
library(testthat)
expect_that(make_filename(2013), equals("accident_2013.csv.bz2"))
expect_that(fars_read_years(2016), gives_warning())
expect_that(fars_read_years(2013), gives_warning())
dname <- file.path("extdata", package="FARS")
dname
dname <- system.path("extdata", package="FARS")
dname <- Sys.path("extdata", package="FARS")
dname <- system.file("extdata", package="FARS")
dname
setwd(dname)
expect_that(fars_read_years(2016), gives_warning())
expect_that(fars_read_years(2013), gives_warning())
library(FARS)
document()
getwd()
setwd("/Users/zhengc/Learning/R-software-development/FARS")
getwd("/Users/zhengc/Learning/R-software-development/FARS")
getwd()
document()
library(FARS)
getwd()
